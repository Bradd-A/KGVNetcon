/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;
import com.toedter.calendar.JDateChooser;
import controllers.EntradaController;
import controllers.ExcelController;
import controllers.ProductController;
import controllers.SalidaController;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.List;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.text.NumberFormatter;
import models.Entradas;
import models.Product;
import models.Salidas;

/**
 *
 * @author arteaga
 */
public class mainView extends javax.swing.JFrame {

    /**
     * Creates new form mainView
     */
    private JDateChooser dateAddProduct;
    private JDateChooser dateEntry;
    private JDateChooser dateOutput;
    ProductController productController = new ProductController();
    EntradaController entradaController = new EntradaController();
    SalidaController salidaController = new SalidaController();

    public mainView() {
        
        initComponents();
        initDataChoosers();
        showData();
        addNewMaterialConfig();
        addEntryConfig();
        addOutputConfig();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addNewMaterial = new javax.swing.JDialog();
        txtCode = new javax.swing.JLabel();
        inputCode = new javax.swing.JTextField();
        txtDesc = new javax.swing.JLabel();
        inputDesc = new javax.swing.JTextField();
        txtStock = new javax.swing.JLabel();
        inputSupplier = new javax.swing.JTextField();
        txtDate = new javax.swing.JLabel();
        txtProvider = new javax.swing.JLabel();
        spinnerStock = new javax.swing.JSpinner();
        txtTitle = new javax.swing.JLabel();
        btnFinishProduct = new javax.swing.JButton();
        btnCancelProduct = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        addOutput = new javax.swing.JDialog();
        txtTitle1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        selectMaterialOutput = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        descMaterialOutput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        inputCustomer = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        spinnerStockOutput = new javax.swing.JSpinner();
        btnFinishOutput = new javax.swing.JButton();
        btnCancelOutput = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        addEntry = new javax.swing.JDialog();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        selectMaterial = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        descMaterial = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        spinnerStockEntry = new javax.swing.JSpinner();
        jLabel11 = new javax.swing.JLabel();
        btnFinishEntry = new javax.swing.JButton();
        btnCancelEntry = new javax.swing.JButton();
        txtWelcome = new javax.swing.JLabel();
        btnAddNewMaterial = new javax.swing.JButton();
        btnAddOutput = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableData = new javax.swing.JTable();
        btnMenu = new javax.swing.JButton();
        btnAddEntry = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();

        addNewMaterial.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addNewMaterial.setTitle("Gestion de Inventario - Ingresar entrada");
        addNewMaterial.setBackground(new java.awt.Color(255, 255, 255));
        addNewMaterial.setIconImage(null);

        txtCode.setLabelFor(inputCode);
        txtCode.setText("Ingresar codigo:");

        inputCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputCodeActionPerformed(evt);
            }
        });

        txtDesc.setLabelFor(inputDesc);
        txtDesc.setText("Ingresar descripcion:");

        txtStock.setLabelFor(spinnerStock);
        txtStock.setText("Ingresar cantidad:");

        txtDate.setText("Ingresar fecha ingreso:");

        txtProvider.setLabelFor(inputSupplier);
        txtProvider.setText("Ingresar proveedor:");

        spinnerStock.setModel(new javax.swing.SpinnerNumberModel());

        txtTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        txtTitle.setText("Ingresar nuevo material");

        btnFinishProduct.setBackground(new java.awt.Color(153, 255, 153));
        btnFinishProduct.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnFinishProduct.setText("Agregar");
        btnFinishProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishProductActionPerformed(evt);
            }
        });

        btnCancelProduct.setBackground(new java.awt.Color(255, 102, 102));
        btnCancelProduct.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnCancelProduct.setText("Cancelar");
        btnCancelProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelProductActionPerformed(evt);
            }
        });

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel2.setText("Hola, aqui puede ingresar los detalles del nuevo material");

        javax.swing.GroupLayout addNewMaterialLayout = new javax.swing.GroupLayout(addNewMaterial.getContentPane());
        addNewMaterial.getContentPane().setLayout(addNewMaterialLayout);
        addNewMaterialLayout.setHorizontalGroup(
            addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewMaterialLayout.createSequentialGroup()
                .addGroup(addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addNewMaterialLayout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(txtTitle))
                    .addGroup(addNewMaterialLayout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(addNewMaterialLayout.createSequentialGroup()
                                .addGroup(addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDate)
                                    .addComponent(txtCode)
                                    .addComponent(txtDesc)
                                    .addComponent(txtStock)
                                    .addComponent(txtProvider)
                                    .addComponent(btnCancelProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnFinishProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputDesc, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputCode, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spinnerStock, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inputSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(91, Short.MAX_VALUE))
        );
        addNewMaterialLayout.setVerticalGroup(
            addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewMaterialLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(txtTitle)
                .addGap(33, 33, 33)
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addGroup(addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCode)
                    .addComponent(inputCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDesc)
                    .addComponent(inputDesc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStock)
                    .addComponent(spinnerStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtProvider)
                    .addComponent(inputSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewMaterialLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFinishProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(122, Short.MAX_VALUE))
        );

        addOutput.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addOutput.setTitle("Gestion de Inventario - Ingresar salida");

        txtTitle1.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        txtTitle1.setText("Ingresar Salida");

        jLabel1.setText("Seleccionar codigo:");

        selectMaterialOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectMaterialOutputActionPerformed(evt);
            }
        });

        jLabel3.setText("Descripcion:");

        descMaterialOutput.setEditable(false);
        descMaterialOutput.setEnabled(false);

        jLabel4.setText("Cliente:");

        jLabel5.setText("Cantidad:");

        spinnerStockOutput.setModel(new javax.swing.SpinnerNumberModel());

        btnFinishOutput.setBackground(new java.awt.Color(153, 255, 153));
        btnFinishOutput.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnFinishOutput.setText("Aceptar");
        btnFinishOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishOutputActionPerformed(evt);
            }
        });

        btnCancelOutput.setBackground(new java.awt.Color(255, 102, 102));
        btnCancelOutput.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnCancelOutput.setText("Cancelar");
        btnCancelOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelOutputActionPerformed(evt);
            }
        });

        jLabel6.setText("Fecha:");

        javax.swing.GroupLayout addOutputLayout = new javax.swing.GroupLayout(addOutput.getContentPane());
        addOutput.getContentPane().setLayout(addOutputLayout);
        addOutputLayout.setHorizontalGroup(
            addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addOutputLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addOutputLayout.createSequentialGroup()
                        .addGroup(addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addOutputLayout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(txtTitle1))
                            .addComponent(jLabel6))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addOutputLayout.createSequentialGroup()
                        .addGroup(addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(addOutputLayout.createSequentialGroup()
                                .addComponent(btnCancelOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnFinishOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(addOutputLayout.createSequentialGroup()
                                .addGroup(addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(33, 33, 33)
                                .addGroup(addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(spinnerStockOutput)
                                    .addComponent(inputCustomer)
                                    .addComponent(selectMaterialOutput, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(descMaterialOutput))))
                        .addGap(53, 53, 53))))
        );
        addOutputLayout.setVerticalGroup(
            addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTitle1)
                .addGap(18, 18, 18)
                .addGroup(addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(selectMaterialOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(descMaterialOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(inputCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(spinnerStockOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(jLabel6)
                .addGap(46, 46, 46)
                .addGroup(addOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancelOutput)
                    .addComponent(btnFinishOutput))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel7.setText("Ingresar entrada");

        jLabel8.setText("Seleccionar codigo del material:");

        selectMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectMaterialActionPerformed(evt);
            }
        });

        jLabel9.setText("Descripcion:");

        descMaterial.setEnabled(false);
        descMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descMaterialActionPerformed(evt);
            }
        });

        jLabel10.setText("Ingresar nueva cantidad:");

        jLabel11.setText("Ingresar fecha de entrada:");

        btnFinishEntry.setBackground(new java.awt.Color(153, 255, 153));
        btnFinishEntry.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnFinishEntry.setText("AGREGAR");
        btnFinishEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishEntryActionPerformed(evt);
            }
        });

        btnCancelEntry.setBackground(new java.awt.Color(255, 102, 102));
        btnCancelEntry.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        btnCancelEntry.setText("CANCELAR");
        btnCancelEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelEntryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addEntryLayout = new javax.swing.GroupLayout(addEntry.getContentPane());
        addEntry.getContentPane().setLayout(addEntryLayout);
        addEntryLayout.setHorizontalGroup(
            addEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addEntryLayout.createSequentialGroup()
                .addGroup(addEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addEntryLayout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jLabel7))
                    .addGroup(addEntryLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(addEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11)
                            .addComponent(btnCancelEntry))
                        .addGap(33, 33, 33)
                        .addGroup(addEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(descMaterial)
                            .addComponent(spinnerStockEntry)
                            .addComponent(selectMaterial, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFinishEntry))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addEntryLayout.setVerticalGroup(
            addEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addEntryLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel7)
                .addGap(26, 26, 26)
                .addGroup(addEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(selectMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(descMaterial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(addEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(spinnerStockEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jLabel11)
                .addGap(61, 61, 61)
                .addGroup(addEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFinishEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(108, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestion de Inventario - Pantalla principal");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);
        setSize(new java.awt.Dimension(1000, 600));

        txtWelcome.setFont(new java.awt.Font("Helvetica Neue", 0, 36)); // NOI18N
        txtWelcome.setText("Hola, estos son todos los productos que se tienen.");

        btnAddNewMaterial.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnAddNewMaterial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconMenuEntradaP.png"))); // NOI18N
        btnAddNewMaterial.setText("NUEVO MATERIAL");
        btnAddNewMaterial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewMaterialActionPerformed(evt);
            }
        });

        btnAddOutput.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnAddOutput.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconDelete.png"))); // NOI18N
        btnAddOutput.setText("INGRESAR SALIDA");
        btnAddOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOutputActionPerformed(evt);
            }
        });

        tableData.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        tableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Descripcion", "Cantidad", "Proveedor", "Fecha Ingreso"
            }
        ));
        tableData.setEnabled(false);
        tableData.setGridColor(new java.awt.Color(0, 0, 0));
        tableData.setShowGrid(true);
        jScrollPane2.setViewportView(tableData);

        btnMenu.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconMenu.png"))); // NOI18N
        btnMenu.setText("MENU");
        btnMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMenuActionPerformed(evt);
            }
        });

        btnAddEntry.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        btnAddEntry.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/iconAdd.png"))); // NOI18N
        btnAddEntry.setText("INGRESAR ENTRADA");
        btnAddEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEntryActionPerformed(evt);
            }
        });

        btnExportar.setText("EXPORTAR");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExportar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(btnAddNewMaterial)
                            .addGap(18, 18, 18)
                            .addComponent(btnAddEntry)
                            .addGap(18, 18, 18)
                            .addComponent(btnAddOutput)
                            .addGap(18, 18, 18)
                            .addComponent(btnMenu))))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(txtWelcome))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnExportar)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNewMaterial)
                    .addComponent(btnMenu)
                    .addComponent(btnAddOutput)
                    .addComponent(btnAddEntry))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddNewMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewMaterialActionPerformed
        // TODO add your handling code here:
        addNewMaterial.setVisible(true); 
        
        
    }//GEN-LAST:event_btnAddNewMaterialActionPerformed

    private void btnMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMenuActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        menuView mev = new menuView();
        mev.setLocationRelativeTo(null);
        mev.setVisible(true);
        
    }//GEN-LAST:event_btnMenuActionPerformed

    private void btnAddOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOutputActionPerformed
        // TODO add your handling code here:
        fillComboAddOutput();
        addOutput.setVisible(true); 
    }//GEN-LAST:event_btnAddOutputActionPerformed

    private void inputCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputCodeActionPerformed

    private void btnFinishProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishProductActionPerformed
        // TODO add your handling code here:
        try {
            String idProduct = inputCode.getText().toUpperCase();
            String descProduct = inputDesc.getText();
            int stock = (int) spinnerStock.getValue();

            LocalDate dateAddP = null;
            if (dateAddProduct.getDate() != null) {
                dateAddP = dateAddProduct.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            }

            String supplier = inputSupplier.getText();

            // Verificar si los campos de entrada son válidos
            if (idProduct.isEmpty() || descProduct.isEmpty() || supplier.isEmpty() || dateAddP == null) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos", "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println("idProduct: " + idProduct);
                System.out.println("descProduct: " + descProduct);
                System.out.println("stock: " + stock);
                System.out.println("dateIn: " + dateAddP);
                System.out.println("supplier: " + supplier);
                return;
            }

            // Verificar si stock es válido
            if (stock < 0) {
                JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido igual o mayor que cero", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar si el ID del producto ya existe en la base de datos
            if (productController.productExists(idProduct)) {
                JOptionPane.showMessageDialog(this, "El ID del producto ya existe en la base de datos", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            int stockAnterior = 0;
            
            //Terminar manana
            /*  if (productController.productExists(idProduct)) {
                //stockAnterior = ;
                return;
            }else{
                stockAnterior = stock;
            } FALTA AGREGAR ENTRADA INICIAL
            */
            

            // Crear una instancia del producto con los valores obtenidos
            Product product = new Product(idProduct, descProduct, stock, dateAddP, supplier);
            // Limpiar los campos de entrada
            inputCode.setText("");
            inputDesc.setText("");
            spinnerStock.setValue(0);
            inputSupplier.setText("");
            dateAddProduct.setDate(null);

            // Verificar si productController es null antes de llamar a insertProduct
            if (productController != null) {
                productController.insertProduct(product);
                //entradaController.insertEntrada(entrada);
            } else {
                JOptionPane.showMessageDialog(this, "productController no está inicializado", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            showData();

            addNewMaterial.dispose();
        } catch (NumberFormatException e) {
            // Mostrar un mensaje de error si el valor de cantidad no es válido
            JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido", "Error", JOptionPane.ERROR_MESSAGE);
        }

        
    }//GEN-LAST:event_btnFinishProductActionPerformed

    private void btnCancelProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelProductActionPerformed
        // TODO add your handling code here:
        addNewMaterial.dispose();
    }//GEN-LAST:event_btnCancelProductActionPerformed

    private void btnFinishOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishOutputActionPerformed
        // TODO add your handling code here:
        try {
            String selectedId = (String) selectMaterialOutput.getSelectedItem(); // Obtener el ID seleccionado
            String selectedDescriptionOutput = "";
            String customer = inputCustomer.getText();
            List<Product> products = productController.getAllProducts();
            for (Product product : products) {
                if (product.getIdProduct().equals(selectedId)) {
                    selectedDescriptionOutput = product.getDescProduct(); // Obtener la descripción
                    break;
                }
            }
            String idProduct = selectedId;
            String descProduct = selectedDescriptionOutput;
            int stock = (int) spinnerStockOutput.getValue();

            LocalDate dateOut = null;
            if (dateOutput.getDate() != null) {
                dateOut = dateOutput.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            }
            // Verificar si los campos de entrada son válidos
            if (idProduct.isEmpty() || descProduct.isEmpty() || stock == 0 || customer.isEmpty() || dateOut == null) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos", "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println("idProduct: " + idProduct);
                System.out.println("descProduct: " + descProduct);
                System.out.println("stock: " + stock);
                System.out.println("dateOut: " + dateOut);
                System.out.println("customer: " + customer);
                return;
            }
            int stockAnterior = productController.obtenerStockAnterior(idProduct);
            // Verificar si stock es válido
            if (stock > stockAnterior) {
                JOptionPane.showMessageDialog(this, "La cantidad ingresada supera la cantidad existente", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }else if (stock < 0){
                JOptionPane.showMessageDialog(this, "La cantidad ingresada debe ser mayor a 0", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            
            int stockRetirado = stock;
            int stockActual = stockAnterior - stockRetirado;
            System.out.println(stockAnterior);
            System.out.println(stockRetirado);
            System.out.println(stockActual);

            // Crear una instancia de Entradas con los valores obtenidos
            Salidas salida = new Salidas(idProduct, descProduct, stockAnterior, stockRetirado, stockActual, customer, dateOut);

            // Limpiar los campos de entrada
            spinnerStock.setValue(0);
            inputSupplier.setText("");
            dateEntry.setDate(null);

            // Verificar si entradaController es null antes de llamar a insertEntrada
            if (salidaController != null) {
                salidaController.insertSalida(salida);
                productController.actualizarStock(idProduct, stockActual);
            } else {
                JOptionPane.showMessageDialog(this, "entradaController no está inicializado", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            showData();

            addOutput.dispose();
        } catch (Exception e) {
            // Mostrar un mensaje de error si el valor de cantidad no es válido
            JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnFinishOutputActionPerformed

    private void btnCancelOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelOutputActionPerformed
        // TODO add your handling code here:
        addOutput.dispose();
    }//GEN-LAST:event_btnCancelOutputActionPerformed

    private void btnAddEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEntryActionPerformed
        // TODO add your handling code here:
        fillComboAddEntry();
        
        addEntry.setVisible(true); 
        
    }//GEN-LAST:event_btnAddEntryActionPerformed

    private void descMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descMaterialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descMaterialActionPerformed

    private void btnFinishEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishEntryActionPerformed
        // TODO add your handling code here:
        try {
            String selectedId = (String) selectMaterial.getSelectedItem(); // Obtener el ID seleccionado
            String selectedDescription = "";
            String supplier = "";
            List<Product> products = productController.getAllProducts();
            for (Product product : products) {
                if (product.getIdProduct().equals(selectedId)) {
                    selectedDescription = product.getDescProduct(); // Obtener la descripción
                    supplier = product.getSupplier();
                    break;
                }
            }
            String idProduct = selectedId;
            String descProduct = selectedDescription;
            int stock = (int) spinnerStockEntry.getValue();

            LocalDate dateIn = null;
            if (dateEntry.getDate() != null) {
                dateIn = dateEntry.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            }
            // Verificar si los campos de entrada son válidos
            if (idProduct.isEmpty() || descProduct.isEmpty() || stock == 0 || supplier.isEmpty() || dateIn == null) {
                JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos", "Error", JOptionPane.ERROR_MESSAGE);
                System.out.println("idProduct: " + idProduct);
                System.out.println("descProduct: " + descProduct);
                System.out.println("stock: " + stock);
                System.out.println("dateIn: " + dateIn);
                System.out.println("supplier: " + supplier);
                return;
            }

            // Verificar si stock es válido
            if (stock < 0) {
                JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido igual o mayor que cero", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            int stockAnterior = productController.obtenerStockAnterior(idProduct);
            int stockAgregado = stock;
            int stockActual = stockAnterior + stockAgregado;
            System.out.println(stockAnterior);
            System.out.println(stockAgregado);
            System.out.println(stockActual);

            // Crear una instancia de Entradas con los valores obtenidos
            Entradas entrada = new Entradas(idProduct, descProduct, stockAnterior, stockAgregado, stockActual, supplier, dateIn);

            // Limpiar los campos de entrada
            spinnerStock.setValue(0);
            inputSupplier.setText("");
            dateEntry.setDate(null);

            // Verificar si entradaController es null antes de llamar a insertEntrada
            if (entradaController != null) {
                entradaController.insertEntrada(entrada);
                productController.actualizarStock(idProduct, stockActual);
            } else {
                JOptionPane.showMessageDialog(this, "entradaController no está inicializado", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            showData();

            addEntry.dispose();
        } catch (Exception e) {
            // Mostrar un mensaje de error si el valor de cantidad no es válido
            JOptionPane.showMessageDialog(this, "La cantidad debe ser un número válido", "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_btnFinishEntryActionPerformed

    private void btnCancelEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelEntryActionPerformed
        // TODO add your handling code here:
        addEntry.dispose(); 
    }//GEN-LAST:event_btnCancelEntryActionPerformed

    private void selectMaterialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectMaterialActionPerformed
        // TODO add your handling code here:
        JComboBox<String> comboBox = (JComboBox<String>) evt.getSource(); // Obtener el JComboBox
        String selectedId = (String) comboBox.getSelectedItem(); // Obtener el ID seleccionado

        // Verificar si no se ha seleccionado ningún índice
        if (comboBox.getSelectedIndex() == -1) {
            descMaterial.setText(""); // Establecer el JTextField vacío
        } else {
            // Aquí puedes realizar una búsqueda en tu base de datos o en una lista pre-cargada
            // para obtener la descripción correspondiente al ID seleccionado
            // Supongamos que tienes una lista pre-cargada de productos
            List<Product> products = productController.getAllProducts();
            for (Product product : products) {
                if (product.getIdProduct().equals(selectedId)) {
                    String selectedDescription = product.getDescProduct(); // Obtener la descripción
                    descMaterial.setText(selectedDescription); // Establecer la descripción en el JTextField
                    break;
                }
            }
        }
        
    }//GEN-LAST:event_selectMaterialActionPerformed

    private void selectMaterialOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectMaterialOutputActionPerformed
        // TODO add your handling code here:
        JComboBox<String> comboBoxOutput = (JComboBox<String>) evt.getSource(); // Obtener el JComboBox
        String selectedIdOutput = (String) comboBoxOutput.getSelectedItem(); // Obtener el ID seleccionado

        // Verificar si no se ha seleccionado ningún índice
        if (comboBoxOutput.getSelectedIndex() == -1) {
            descMaterialOutput.setText(""); // Establecer el JTextField vacío
        } else {
            // Aquí puedes realizar una búsqueda en tu base de datos o en una lista pre-cargada
            // para obtener la descripción correspondiente al ID seleccionado
            // Supongamos que tienes una lista pre-cargada de productos
            List<Product> products = productController.getAllProducts();
            for (Product product : products) {
                if (product.getIdProduct().equals(selectedIdOutput)) {
                    String selectedDescription = product.getDescProduct(); // Obtener la descripción
                    descMaterialOutput.setText(selectedDescription); // Establecer la descripción en el JTextField
                    break;
                }
            }
        }
    }//GEN-LAST:event_selectMaterialOutputActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        ExcelController excelController = new ExcelController();
        excelController.exportToExcel();
    }//GEN-LAST:event_btnExportarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mainView mv = new mainView();        
                mv.setLocationRelativeTo(null);
                mv.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addEntry;
    private javax.swing.JDialog addNewMaterial;
    private javax.swing.JDialog addOutput;
    private javax.swing.JButton btnAddEntry;
    private javax.swing.JButton btnAddNewMaterial;
    private javax.swing.JButton btnAddOutput;
    private javax.swing.JButton btnCancelEntry;
    private javax.swing.JButton btnCancelOutput;
    private javax.swing.JButton btnCancelProduct;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnFinishEntry;
    private javax.swing.JButton btnFinishOutput;
    private javax.swing.JButton btnFinishProduct;
    private javax.swing.JButton btnMenu;
    private javax.swing.JTextField descMaterial;
    private javax.swing.JTextField descMaterialOutput;
    private javax.swing.JTextField inputCode;
    private javax.swing.JTextField inputCustomer;
    private javax.swing.JTextField inputDesc;
    private javax.swing.JTextField inputSupplier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> selectMaterial;
    private javax.swing.JComboBox<String> selectMaterialOutput;
    private javax.swing.JSpinner spinnerStock;
    private javax.swing.JSpinner spinnerStockEntry;
    private javax.swing.JSpinner spinnerStockOutput;
    private javax.swing.JTable tableData;
    private javax.swing.JLabel txtCode;
    private javax.swing.JLabel txtDate;
    private javax.swing.JLabel txtDesc;
    private javax.swing.JLabel txtProvider;
    private javax.swing.JLabel txtStock;
    private javax.swing.JLabel txtTitle;
    private javax.swing.JLabel txtTitle1;
    private javax.swing.JLabel txtWelcome;
    // End of variables declaration//GEN-END:variables

    private void addNewMaterialConfig() {
        addNewMaterial.setTitle("Gestion de Inventario - Ingresar material");
        addNewMaterial.setSize(450, 450);    
        addNewMaterial.setLocationRelativeTo(null);
        addNewMaterial.setModal(true);
        addNewMaterial.setResizable(false);
        addNewMaterial.add(dateAddProduct);
        //set bg color
        addNewMaterial.getContentPane().setBackground(Color.WHITE);
        // *---------------------*
        // jSpinner config
        SpinnerNumberModel spinnerModel = new SpinnerNumberModel();
        spinnerStock.setModel(spinnerModel);
        // jSpinner config - get spinner editor
        JSpinner.DefaultEditor spinnerEditor = (JSpinner.DefaultEditor) spinnerStock.getEditor();
        // jSpinner config - config editor just for numbers
        JFormattedTextField textField = spinnerEditor.getTextField();
        ((NumberFormatter) textField.getFormatter()).setAllowsInvalid(false);
        // jSpinner config - config format numbers
        NumberFormat format = NumberFormat.getIntegerInstance();
        format.setGroupingUsed(false);
        ((NumberFormatter) textField.getFormatter()).setFormat(format);
    }

    private void addOutputConfig() {
        // *---------------------*
        //set bg color
        addOutput.getContentPane().setBackground(Color.WHITE);
        //jDialog main config
        addOutput.setTitle("Gestion de Inventario - Ingresar salida");
        addOutput.setSize(400, 420);    
        addOutput.setLocationRelativeTo(null);
        addOutput.setModal(true);
        addOutput.setResizable(false);
        addOutput.add(dateOutput);
        // *---------------------*
        SpinnerNumberModel spinnerModel = new SpinnerNumberModel();
        spinnerStockOutput.setModel(spinnerModel);
        // jSpinner config - get spinner editor
        JSpinner.DefaultEditor spinnerEditorOutput = (JSpinner.DefaultEditor) spinnerStockOutput.getEditor();
        // jSpinner config - config editor just for numbers
        JFormattedTextField textFieldOutput = spinnerEditorOutput.getTextField();
        ((NumberFormatter) textFieldOutput.getFormatter()).setAllowsInvalid(false);
        // jSpinner config - config format numbers
        NumberFormat format = NumberFormat.getIntegerInstance();
        format.setGroupingUsed(false);
        ((NumberFormatter) textFieldOutput.getFormatter()).setFormat(format);
    }
    
    public javax.swing.JTable getTableData() {
        return tableData;
    }

    private void showData() {
        List<Product> products = productController.getAllProducts();
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tableData.getModel();
        model.setRowCount(0); // Limpiar la tabla antes de agregar los nuevos datos
        for (Product p : products) {
            Object[] rowData = new Object[5];
            rowData[0] = p.getIdProduct();
            rowData[1] = p.getDescProduct();
            rowData[2] = p.getStock();
            rowData[3] = p.getSupplier();
            rowData[4] = p.getDateIn();
            model.addRow(rowData);
        }
    }

    private void initDataChoosers() {
        dateAddProduct = new JDateChooser();
        dateAddProduct.setBounds(220, 255, 139, 30);
        
        dateEntry = new JDateChooser();
        dateEntry.setBounds(252, 205, 139, 30);
        
        dateOutput = new JDateChooser();
        dateOutput.setBounds(215, 215, 139, 30);
    }

    private void addEntryConfig() {
        addEntry.setTitle("Gestion de Inventario - Ingresar material");
        addEntry.setSize(450, 450);    
        addEntry.setLocationRelativeTo(null);
        addEntry.setModal(true);
        addEntry.setResizable(false);
        addEntry.add(dateEntry);
        //set bg color
        addEntry.getContentPane().setBackground(Color.WHITE);
        // *---------------------*
        // jSpinner config
        SpinnerNumberModel spinnerModel = new SpinnerNumberModel();
        spinnerStockEntry.setModel(spinnerModel);
        // jSpinner config - get spinner editor
        JSpinner.DefaultEditor spinnerEditor = (JSpinner.DefaultEditor) spinnerStockEntry.getEditor();
        // jSpinner config - config editor just for numbers
        JFormattedTextField textField = spinnerEditor.getTextField();
        ((NumberFormatter) textField.getFormatter()).setAllowsInvalid(false);
        // jSpinner config - config format numbers
        NumberFormat format = NumberFormat.getIntegerInstance();
        format.setGroupingUsed(false);
        ((NumberFormatter) textField.getFormatter()).setFormat(format);
    }

    private void fillComboAddEntry() {
        List<Product> products = productController.getAllProducts();
        selectMaterial.removeAllItems();
        for (Product product : products) {
            String idProduct = product.getIdProduct();
            selectMaterial.addItem(idProduct);
        }
        selectMaterial.setSelectedIndex(-1);
        
    }

    private void fillComboAddOutput() {
        List<Product> products = productController.getAllProducts();
        selectMaterialOutput.removeAllItems();
        for (Product product : products) {
            String idProduct = product.getIdProduct();
            selectMaterialOutput.addItem(idProduct);
        }
        selectMaterialOutput.setSelectedIndex(-1);
    }

}
